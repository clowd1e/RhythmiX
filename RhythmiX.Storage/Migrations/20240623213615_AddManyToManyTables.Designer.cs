// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RhythmiX.Storage;

#nullable disable

namespace RhythmiX.Storage.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20240623213615_AddManyToManyTables")]
    partial class AddManyToManyTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RhythmiX.Storage.Entities.Album", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Albums", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserHistoryAlbums", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId", "AlbumId")
                        .IsUnique();

                    b.ToTable("UserHistoryAlbums");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserHistoryArtists", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId", "ArtistId")
                        .IsUnique();

                    b.ToTable("UserHistoryArtists");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserHistoryPlaylists", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PlaylistId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UserId", "PlaylistId")
                        .IsUnique();

                    b.ToTable("UserHistoryPlaylists");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserHistoryTracks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId", "TrackId")
                        .IsUnique();

                    b.ToTable("UserHistoryTracks");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserLikedAlbums", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId", "AlbumId")
                        .IsUnique();

                    b.ToTable("UserLikedAlbums");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserLikedArtists", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId", "ArtistId")
                        .IsUnique();

                    b.ToTable("UserLikedArtists");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserLikedPlaylists", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PlaylistId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UserId", "PlaylistId")
                        .IsUnique();

                    b.ToTable("UserLikedPlaylists");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserLikedTracks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId", "TrackId")
                        .IsUnique();

                    b.ToTable("UserLikedTracks");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Playlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Playlists", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint");

                    b.Property<string>("AlbumImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioDownload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Tracks", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserHistoryAlbums", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Album", "Album")
                        .WithMany("UserHistoryAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", "User")
                        .WithMany("UserHistoryAlbums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserHistoryArtists", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Artist", "Artist")
                        .WithMany("UserHistoryArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", "User")
                        .WithMany("UserHistoryArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserHistoryPlaylists", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Playlist", "Playlist")
                        .WithMany("UserHistoryPlaylists")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", "User")
                        .WithMany("UserHistoryPlaylists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserHistoryTracks", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Track", "Track")
                        .WithMany("UserHistoryTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", "User")
                        .WithMany("UserHistoryTracks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserLikedAlbums", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Album", "Album")
                        .WithMany("UserLikedAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", "User")
                        .WithMany("UserLikedAlbums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserLikedArtists", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Artist", "Artist")
                        .WithMany("UserLikedArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", "User")
                        .WithMany("UserLikedArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserLikedPlaylists", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Playlist", "Playlist")
                        .WithMany("UserLikedPlaylists")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", "User")
                        .WithMany("UserLikedPlaylists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.ManyToMany.UserLikedTracks", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Track", "Track")
                        .WithMany("UserLikedTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", "User")
                        .WithMany("UserLikedTracks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Album", b =>
                {
                    b.Navigation("UserHistoryAlbums");

                    b.Navigation("UserLikedAlbums");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Artist", b =>
                {
                    b.Navigation("UserHistoryArtists");

                    b.Navigation("UserLikedArtists");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Playlist", b =>
                {
                    b.Navigation("UserHistoryPlaylists");

                    b.Navigation("UserLikedPlaylists");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Track", b =>
                {
                    b.Navigation("UserHistoryTracks");

                    b.Navigation("UserLikedTracks");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.User", b =>
                {
                    b.Navigation("UserHistoryAlbums");

                    b.Navigation("UserHistoryArtists");

                    b.Navigation("UserHistoryPlaylists");

                    b.Navigation("UserHistoryTracks");

                    b.Navigation("UserLikedAlbums");

                    b.Navigation("UserLikedArtists");

                    b.Navigation("UserLikedPlaylists");

                    b.Navigation("UserLikedTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
