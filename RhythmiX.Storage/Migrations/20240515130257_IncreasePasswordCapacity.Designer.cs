// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RhythmiX.Storage;

#nullable disable

namespace RhythmiX.Storage.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20240515130257_IncreasePasswordCapacity")]
    partial class IncreasePasswordCapacity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlbumUser", b =>
                {
                    b.Property<long>("LikedAlbumsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LikedUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("LikedAlbumsId", "LikedUsersId");

                    b.HasIndex("LikedUsersId");

                    b.ToTable("UserLikedAlbums", "MusicDb");
                });

            modelBuilder.Entity("AlbumUser1", b =>
                {
                    b.Property<long>("HistoryAlbumsId")
                        .HasColumnType("bigint");

                    b.Property<long>("HistoryUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryAlbumsId", "HistoryUsersId");

                    b.HasIndex("HistoryUsersId");

                    b.ToTable("UserHistoryAlbums", "MusicDb");
                });

            modelBuilder.Entity("ArtistUser", b =>
                {
                    b.Property<long>("LikedArtistsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LikedUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("LikedArtistsId", "LikedUsersId");

                    b.HasIndex("LikedUsersId");

                    b.ToTable("UserLikedArtists", "MusicDb");
                });

            modelBuilder.Entity("ArtistUser1", b =>
                {
                    b.Property<long>("HistoryArtistsId")
                        .HasColumnType("bigint");

                    b.Property<long>("HistoryUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryArtistsId", "HistoryUsersId");

                    b.HasIndex("HistoryUsersId");

                    b.ToTable("UserHistoryArtists", "MusicDb");
                });

            modelBuilder.Entity("PlaylistUser", b =>
                {
                    b.Property<long>("LikedPlaylistsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LikedUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("LikedPlaylistsId", "LikedUsersId");

                    b.HasIndex("LikedUsersId");

                    b.ToTable("UserLikedPlaylists", "MusicDb");
                });

            modelBuilder.Entity("PlaylistUser1", b =>
                {
                    b.Property<long>("HistoryPlaylistsId")
                        .HasColumnType("bigint");

                    b.Property<long>("HistoryUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryPlaylistsId", "HistoryUsersId");

                    b.HasIndex("HistoryUsersId");

                    b.ToTable("UserHistoryPlaylists", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Album", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Albums", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Playlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Playlists", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint");

                    b.Property<string>("AlbumImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ApiId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioDownload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Tracks", "MusicDb");
                });

            modelBuilder.Entity("RhythmiX.Storage.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", "MusicDb");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<long>("LikedTracksId")
                        .HasColumnType("bigint");

                    b.Property<long>("LikedUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("LikedTracksId", "LikedUsersId");

                    b.HasIndex("LikedUsersId");

                    b.ToTable("UserLikedTracks", "MusicDb");
                });

            modelBuilder.Entity("TrackUser1", b =>
                {
                    b.Property<long>("HistoryTracksId")
                        .HasColumnType("bigint");

                    b.Property<long>("HistoryUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryTracksId", "HistoryUsersId");

                    b.HasIndex("HistoryUsersId");

                    b.ToTable("UserHistoryTracks", "MusicDb");
                });

            modelBuilder.Entity("AlbumUser", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("LikedAlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlbumUser1", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("HistoryAlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistUser", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("LikedArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistUser1", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("HistoryArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaylistUser", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("LikedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaylistUser1", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("HistoryPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("LikedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser1", b =>
                {
                    b.HasOne("RhythmiX.Storage.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("HistoryTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhythmiX.Storage.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("HistoryUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
